include "getARGV.idp"
IFMACRO(!partitioner)
macro partitioner()metis// EOM
ENDIFMACRO
IFMACRO(partitioner,metis)
load "metis"
macro partitionerSeq(part, Th, size){ if(size <= 1) part = 0; else metisdual(part, Th, size); }// EOM
macro partitionerPar(part, Th, comm, size)broadcast(processor(0, comm), part)// EOM
ENDIFMACRO
IFMACRO(partitioner,scotch)
load "scotch"
macro partitionerSeq(part, Th, size)scotch(part, Th, size)// EOM
macro partitionerPar(part, Th, comm, size)broadcast(processor(0, comm), part)// EOM
ENDIFMACRO
IFMACRO(partitioner,parmetis)
load "parmetis"
macro partitionerSeq(part, Th, size)// EOM
macro partitionerPar(part, Th, comm, size)parmetis(part, Th, size, communicator = comm, worker = getARGV("-parmetis_worker", 1))// EOM
ENDIFMACRO
IFMACRO(!partitionerSeq)
cout << "The macro 'partitioner' must be set to 'metis', 'scotch', or 'parmetis'" << endl;
exit(1);
ENDIFMACRO
IFMACRO(!dimension)
cout << "The macro 'dimension' must be defined" << endl;
exit(1);
ENDIFMACRO
IFMACRO(dimension,2)
macro meshN()mesh// EOM             // two-dimensional problem
macro bbN()bb2// EOM                // two-dimensional bounding box
macro intN()int2d// EOM             // two-dimensional integral
macro intN1()int1d// EOM            // one-dimensional integral
macro readmeshN()readmesh// EOM     // two-dimensional problem
ENDIFMACRO
IFMACRO(dimension,3)
load "msh3"
macro meshN()mesh3// EOM            // three-dimensional problem
macro bbN()bb3// EOM                // three-dimensional bounding box
macro intN()int3d// EOM             // three-dimensional integral
macro intN1()int2d// EOM            // two-dimensional integral
macro readmeshN()readmesh3// EOM    // three-dimensional problem
ENDIFMACRO
IFMACRO(dimension,3S)
load "msh3"
macro meshN()meshS// EOM            // three-dimensional surface problem
macro bbN()bb3// EOM                // three-dimensional bounding box
macro intN()int2d// EOM             // two-dimensional integral
macro intN1()int1d// EOM            // one-dimensional integral
ENDIFMACRO
IFMACRO(!meshN)
cout << "The macro 'dimension' must be set to '2', '3', or '3S'" << endl;
exit(1);
ENDIFMACRO
searchMethod = 1;

macro bb2(boundingMesh, overshoot, ThGlobal)
            real[int] bb(4);
            boundingbox(bb, boundingMesh);
            bb(0) -= overshoot;
            bb(1) += overshoot;
            bb(2) -= overshoot;
            bb(3) += overshoot;

            ThGlobal = trunc(ThGlobal, (x >= bb(0) && x <= bb(1) && y >= bb(2) && y <= bb(3)));// EOM

macro bb3(boundingMesh, overshoot, ThGlobal)
            real[int] bb(6);
            boundingbox(bb, boundingMesh);
            bb(0) -= overshoot;
            bb(1) += overshoot;
            bb(2) -= overshoot;
            bb(3) += overshoot;
            bb(4) -= overshoot;
            bb(5) += overshoot;

            ThGlobal = trunc(ThGlobal, (x >= bb(0) && x <= bb(1) && y >= bb(2) && y <= bb(3) && z >= bb(4) && z <= bb(5)));// EOM

macro plotMPI(Th, u, Pk, def, K, params)
if(!NoGraphicWindow) {
    meshN ThCurrent = Th;
    fespace Xh(ThCurrent, Pk);
    Xh<K> def(uSend);
    def(uSend) = u;
    if(mpirank == 0) {
        meshN[int] meshTab(mpisize);
        Xh<K>[int] def(uTab)(mpisize);
        uTab[0][] = uSend[];
        meshTab[0] = ThCurrent;
        mpiRequest[int] rq(mpisize - 1);
        for(int i = 1; i < mpisize; ++i)
            Irecv(processor(i, mpiCommWorld, rq[i - 1]), meshTab[i]);
        for(int i = 1; i < mpisize; ++i)
            mpiWaitAny(rq);
        for(int i = 1; i < mpisize; ++i) {
            ThCurrent = meshTab[i];
            Irecv(processor(i, mpiCommWorld, rq[i - 1]), uTab[i][]);
        }
        for(int i = 1; i < mpisize; ++i)
            mpiWaitAny(rq);
        plot(def(uTab), params);
    }
    else {
        mpiRequest[int] rq(2);
        Isend(processor(0, rq[0]), ThCurrent);
        Isend(processor(0, rq[1]), uSend[]);
        mpiWait(rq[0]);
        mpiWait(rq[1]);
    }
}// EOM

macro partition(meshName, borderName, globalName, PhGlobal, VhGlobal, part, rank, size, s, overlap, level, prolongation, D, P, intersection, comm, fakeInterface, PkPart, defPart, initPart, bs) {
    assert(level >= 1);
    meshName[level - 1] = trunc(globalName, abs(part - rank) < 0.1, label = fakeInterface);
    mpiBarrier(comm);
    real timerPartition = mpiWtime();
    intersection.resize(1);
    intersection[0].resize(0);
    {
        fespace PhLocal(meshName[level - 1], P0);
        PhLocal overshoot = hTriangle;
        real max = 4.0 * overlap * overshoot[].max;
        bbN(meshName[level - 1], max, globalName)
    }
    PhGlobal supp = abs(part - rank) < 0.1;
    VhGlobal suppSmooth;
    AddLayers(globalName, supp[], 2 * overlap, suppSmooth[]);
    {
        meshN neighbors = trunc(globalName, suppSmooth > 0.001 && suppSmooth < 0.999);
        fespace Oh(neighbors, P0);
        Oh partOverlap = part;
        Unique(partOverlap[], intersection[0], remove = rank);
    }
    fespace VhLocal(meshName[level - 1], P1);
    VhLocal[int] partitionIntersection(intersection[0].n);
    if(s > 1 && level <= 1) {
        globalName = trunc(globalName, suppSmooth > 0.001, split = s);
        supp = abs(part - rank) < 0.1;
        suppSmooth = 0;
        AddLayers(globalName, supp[], 2 * overlap, suppSmooth[]);
    }
    globalName = trunc(globalName, suppSmooth > 0.001, label = 9999);
    real eps = intN(globalName)(1.0);
    real[int] epsTab(intersection[0].n);
    mpiRequest[int] rq(2 * intersection[0].n);
    if(mpiSize(comm) == size) {
        for(int j = 0; j < intersection[0].n; ++j)
            Irecv(processor(intersection[0][j], comm, rq[j]), epsTab[j]);
        for(int j = 0; j < intersection[0].n; ++j)
            Isend(processor(intersection[0][j], comm, rq[intersection[0].n + j]), eps);
    }
    else
        epsTab = 1.0e+30;
    supp = supp;
    suppSmooth = suppSmooth;
    meshName[level - 1] = trunc(globalName, suppSmooth > 0.501, label = fakeInterface);
    prolongation.resize(level - 1);
    {
        meshN globalNameRefined = globalName;
        for(int i = level - 1; i > 0; --i) {
            globalNameRefined = trunc(globalNameRefined, 1, split = s);
            meshName[i - 1] = trunc(globalNameRefined, suppSmooth > 0.501, label = fakeInterface);
            fespace WhLocalRefined(meshName[i - 1], P);
            fespace WhLocalCoarse(meshName[i], P);
            prolongation[i - 1] = interpolate(WhLocalRefined, WhLocalCoarse);
        }
    }
    if(!removeZeros && (fakeInterface != -111111 || overlap != 1)) {
        if(suppSmooth[].min < 0.501) {
            borderName[level - 1] = trunc(globalName, (suppSmooth > (overlap - 0.999) / real(2 * overlap)) && (suppSmooth < 0.501), label = (abs(fakeInterface) + 1) * 100);
            for(int i = level - 2; i >= 0; --i) {
                borderName[i] = trunc(borderName[i + 1], 1, split = s, label = (abs(fakeInterface) + 1) * 100);
                meshN tempRefined = meshName[i] + borderName[i];
                fespace PhRefined(tempRefined, P0);
                PhRefined suppRefined = supp;
                fespace VhBorderRefined(borderName[i], P1);
                VhBorderRefined suppBorder = suppRefined;
                borderName[i] = trunc(borderName[i], suppBorder > 0.01);
            }
        }
    }
    VhLocal khi = max(2 * suppSmooth - 1.0, 0.0);
    VhLocal sum = khi;
    VhGlobal phi = 0;
    part = part;
    int numberIntersection = 0;
    for(int k = 0; k < 2 * intersection[0].n; ++k)
        mpiWaitAny(rq);
    for(int i = 0; i < intersection[0].n; ++i) {
        PhGlobal suppPartition = abs(part - intersection[0][i]) < 0.1;
        AddLayers(globalName, suppPartition[], overlap, phi[]);
        if(min(eps, epsTab[i]) > 0.0) {
            if(intN(globalName)(phi) / min(eps, epsTab[i]) > 1.0e-6) {
                partitionIntersection[numberIntersection] = phi;
                if(!trueRestrict)
                    sum[] += partitionIntersection[numberIntersection][];
                intersection[0][numberIntersection++] = intersection[0][i];
            }
        }
    }
    if(numberIntersection != intersection[0].n)
        intersection[0].resize(numberIntersection);
    intersection.resize(1 + level * numberIntersection);
    meshN[int] meshIntersection(numberIntersection);
    for(int j = 0; j < level; ++j) {
        for(int i = 0; i < numberIntersection; ++i) {
            int[int] n2o;
            meshIntersection[i] = trunc(meshName[j], partitionIntersection[i] > 1.0e-6, new2old = n2o, label = 9999);
            if(!removeZeros) {
IFMACRO(vectorialfe)
                fespace singleComponentWh(meshName[j], vectorialfe);
                fespace WhIntersection(meshIntersection[i], vectorialfe);
ENDIFMACRO
IFMACRO(!vectorialfe)
                fespace singleComponentWh(meshName[j], P);
                fespace WhIntersection(meshIntersection[i], P);
ENDIFMACRO
                intersection[1 + i + j * numberIntersection] = restrict(WhIntersection, singleComponentWh, n2o);
            }
        }
    }
    partitionIntersection.resize(0);
    for(int i = 0; i < (trueRestrict ? level : level - 1); ++i) {
        fespace VhRefined(meshName[i], P1);
        fespace PhRefined(meshName[i], P0);
        PhRefined partRefined = part;
        PhRefined supp = abs(partRefined - rank) < 0.1;
        varf vSupp(u, v) = intN(meshName[i], qforder = 1)(supp * v);
        VhRefined khiL;
        khiL[] = vSupp(0, VhRefined);
        khiL = khiL > 0.0;
        VhRefined sum = khiL;
        for(int j = 0; j < numberIntersection; ++j) {
            supp = abs(partRefined - intersection[0][j]) < 0.1;
            VhRefined phiL;
            phiL[] = vSupp(0, VhRefined);
            phiL = phiL > 0.0;
            sum[] += phiL[];
        }
        khiL[] ./= sum[];
        if(i < level - 1) {
            fespace WhRefined(meshName[i], PkPart);
            WhRefined defPart(func2vec);
            defPart(func2vec) = initPart(khiL);
            D[i].resize(WhRefined.ndof);
            D[i] = func2vec[];
        }
        else
            khi[] = khiL[];
    }
    if(!trueRestrict)
        khi[] = khi[] ./= sum[];
    fespace WhPart(meshName[level - 1], PkPart);
    WhPart defPart(func2vec);
    if(trueRestrict && mpiSize(comm) == size && removeZeros) {
        assert(level == 1);
        meshN ThIntersection;
        fespace PhIntersection(ThIntersection, P0);
        PhIntersection[int] recv(numberIntersection);
        PhIntersection[int] send(numberIntersection);
        mpiRequest[int] rq(2 * numberIntersection);
        for(int i = 0; i < numberIntersection; ++i) {
            ThIntersection = meshIntersection[i];
            Irecv(processor(intersection[0][i], comm, rq[i]), recv[i][]);
            send[i] = khi;
            Isend(processor(intersection[0][i], comm, rq[numberIntersection + i]), send[i][]);
        }
        meshName[0] = trunc(meshName[0], khi > 1.0e-6, label = 9999);
        khi = khi;
        int[int] skip(0);
        for(int k = 0; k < 2 * numberIntersection; ++k) {
            int i = mpiWaitAny(rq);
            if(i < numberIntersection) {
                ThIntersection = meshIntersection[i];
                PhIntersection intersection = send[i] > 1.0e-6 && recv[i] > 1.0e-6;
                if(intersection[].l2 > 1.0e-6)
                    meshIntersection[i] = trunc(meshIntersection[i], intersection  > 1.0e-6, label = 9999);
                else {
                    skip.resize(skip.n + 1);
                    skip[skip.n - 1] = i;
                }
            }
        }
        skip.sort;
        intersection.resize(1 + numberIntersection - skip.n);
        int j = 0;
        for(int i = 0; i < numberIntersection; ++i) {
            bool skipped = false;
            if(j < skip.n) {
                if(skip[j] == i) {
                    ++j;
                    skipped = true;
                }
            }
            if(!skipped) {
IFMACRO(vectorialfe)
                fespace singleComponentWh(meshName[0], vectorialfe);
                fespace WhIntersection(meshIntersection[i], vectorialfe);
ENDIFMACRO
IFMACRO(!vectorialfe)
                fespace singleComponentWh(meshName[0], P);
                fespace WhIntersection(meshIntersection[i], P);
ENDIFMACRO
                matrix R = interpolate(WhIntersection, singleComponentWh);
                R.thresholding(1.0e-10);
                real[int] C;
                int[int] I;
                [I, intersection[1 + i - j], C] = R;
                intersection[1 + i - j].resize(R.nbcoef);
                intersection[0][i - j] = intersection[0][i];
            }
        }
        numberIntersection -= skip.n;
        intersection[0].resize(numberIntersection);
        if(fakeInterface != -111111 || overlap != 1) {
            PhGlobal suppPartition = khi > 0.1;
            AddLayers(globalName, suppPartition[], 1, phi[]);
            borderName[0] = trunc(globalName, phi > 0.001 && phi < 0.501, label = (abs(fakeInterface) + 1) * 100);
        }
    }
IFMACRO(vectorialfe)
    if(bs > 1)
        for(int i = 0; i < intersection.n - 1; ++i) {
            int n = intersection[1 + i].n;
            intersection[1 + i].resize(n * bs);
            for(int j = n - 1; j != -1; --j)
                for(int k = bs - 1; k != -1; --k)
                    intersection[1 + i][j * bs + k] = intersection[1 + i][j] * bs + k;
        }
ENDIFMACRO
    defPart(func2vec) = initPart(khi);
    D[level - 1].resize(WhPart.ndof);
    D[level - 1] = func2vec[];
    if(trueRestrict && ((WhPart.ndof % meshName[level - 1].nt) == 0)) {
        defPart(func2vec) = initPart(abs(part - rank) < 0.1);
        D[level - 1] = func2vec[];
    }
}// EOM

macro buildOverlapEdgePeriodicRecursive(Th, ThBorder, fakeInterface, s, overlap, level, prolongation, intersection, D, P, comm, excluded, PkPart, defPart, initPart, labPeriodic, userPartitioning, bs) {
    Th.resize(level);
    ThBorder.resize(level);
    prolongation.resize(level - 1);
    real timing = mpiWtime();
    if(mpiSize(comm) > 1 && !excluded) {
        meshN ThGlobal = Th[level - 1];
        fespace PhGlobal(ThGlobal, P0);
        fespace VhGlobal(ThGlobal, P1);
        PhGlobal partGlobal;
        if(userPartitioning.n != PhGlobal.ndof || labPeriodic.n > 0) {
            timing = mpiWtime();
            meshN ThGlobalPeriodic;
            if(labPeriodic.n > 0) {
                VhGlobal marker;
                for(int i = 0; i < labPeriodic.n; ++i) {
                    varf vMarker(u, v) = on(labPeriodic[i], u = 1.0);
                    marker[] += vMarker(0, VhGlobal, tgv = -1);
                }
                PhGlobal partPeriodic = marker > 0.1;
                while(1) {
                    AddLayers(ThGlobal, partPeriodic[], 1 + overlap, marker[]);
                    partPeriodic = marker > 0.001;
                    ThGlobalPeriodic = trunc(ThGlobal, partPeriodic < 0.999);
                    if(ThGlobal.nt / real(ThGlobalPeriodic.nt) > mpisize / real(mpisize - 1))
                        break;
                }
            }
            if(mpiRank(comm) == 0) {
                if(verbosity > 0)
                    cout.scientific << " --- global mesh of " << ThGlobal.nt << " elements (prior to refinement) partitioned with " << Stringification(partitioner);
                if(labPeriodic.n > 0) {
                    fespace PhPeriodic(ThGlobalPeriodic, P0);
                    PhPeriodic partPeriodic;
                    if(mpiSize(comm) > 2) {
                        partitionerSeq(partPeriodic[], ThGlobalPeriodic, mpiSize(comm) - 1);
                        partPeriodic[] += 1.0;
                    }
                    else
                        partPeriodic[] = 1.0;
                    partGlobal = partPeriodic;
                }
                else {
                    partitionerSeq(partGlobal[], ThGlobal, mpiSize(comm));
                }
            }
            if(labPeriodic.n > 0 && Stringification(partitioner) != "metis" && Stringification(partitioner) != "scotch") {
                fespace PhPeriodic(ThGlobalPeriodic, P0);
                PhPeriodic partPeriodic;
                if(mpiSize(comm) > 2) {
                    partitionerPar(partPeriodic[], ThGlobalPeriodic, comm, mpiSize(comm) - 1);
                    partPeriodic[] += 1.0;
                }
                else
                    partPeriodic[] = 1.0;
                partGlobal = partPeriodic;
            }
            else
                partitionerPar(partGlobal[], ThGlobal, comm, mpiSize(comm));
            if(mpiRank(comm) == 0 && verbosity > 0)
                cout.scientific << " (in " << mpiWtime() - timing << ")" << endl;
            timing = mpiWtime();
        }
        else {
            partGlobal[] = userPartitioning;
        }
IFMACRO(!trueRestrict)
        bool trueRestrict = usedARGV("-true_restrict") != -1;
ENDIFMACRO
IFMACRO(!removeZeros)
        bool removeZeros = trueRestrict && overlap == 1 && usedARGV("-remove_zeros") != -1;
ENDIFMACRO
        partition(Th, ThBorder, ThGlobal, PhGlobal, VhGlobal, partGlobal, mpiRank(comm), mpiSize(comm), s, overlap, level, prolongation, D, P, intersection, comm, fakeInterface, PkPart, defPart, initPart, bs)
    }
    else if(mpiSize(comm) == 1) {
        for(int i = level - 1; i > 0; --i) {
            Th[i - 1] = trunc(Th[i], 1, split = s);
            fespace WhLocalRefined(Th[i - 1], P);
            fespace WhLocalCoarse(Th[i], P);
            prolongation[i - 1] = interpolate(WhLocalRefined, WhLocalCoarse);
            D[i].resize(WhLocalCoarse.ndof);
            D[i] = 1.0;
        }
        if(level == 1 && s > 1)
            Th[0] = trunc(Th[0], 1, split = s);
        fespace WhLocal(Th[0], P);
        D[0].resize(WhLocal.ndof);
        D[0] = 1.0;
    }
    mpiBarrier(mpiCommWorld);
    if(verbosity > 0 && mpirank == 0) cout.scientific << " --- partition of unity built (in " << mpiWtime() - timing << ")" << endl;
}// EOM

macro buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart, labPeriodic, userPartitioning, bs) {
    meshN[int] ThTab(1);
    meshN[int] ThBorderTab(1);
    real[int][int] DTab(1);
    ThTab[0] = Th;
    matrix[int] prolongation(0);
    buildOverlapEdgePeriodicRecursive(ThTab, ThBorderTab, fakeInterface, s, overlap, 1, prolongation, intersection, DTab, P, comm, excluded, PkPart, defPart, initPart, labPeriodic, userPartitioning, bs)
    Th = ThTab[0];
    ThBorder = ThBorderTab[0];
    D.resize(DTab[0].n);
    D = DTab[0];
}// EOM

IFMACRO(vectorialfe)
macro buildOverlapEdgeRecursive(Th, ThBorder, fakeInterface, s, overlap, level, prolongation, intersection, D, P, comm, excluded, PkPart, defPart, initPart, bs) {
    int[int] emptyArray(0);
    real[int] emptyRealArray(0);
    buildOverlapEdgePeriodicRecursive(Th, ThBorder, fakeInterface, s, overlap, level, prolongation, intersection, D, P, comm, excluded, PkPart, defPart, initPart, emptyArray, emptyRealArray, bs)
}// EOM
macro buildOverlapEdge(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart, bs) {
    int[int] emptyArray(0);
    real[int] emptyRealArray(0);
    buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart, emptyArray, emptyRealArray, bs)
}// EOM
macro buildOverlapEdgeWithPartitioning(Th, ThBorder, part, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart, bs) {
    int[int] emptyArray(0);
    buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart, emptyArray, part, bs)
}// EOM
macro buildOverlapWithPartitioning(Th, ThBorder, part, fakeInterface, s, overlap, intersection, D, P, comm, excluded, bs) {
    int[int] emptyArray(0);
    buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, emptyArray, part, bs)
}// EOM
macro buildOverlap(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, bs) {
    int[int] emptyArray(0);
    real[int] emptyRealArray(0);
    buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, emptyArray, emptyRealArray, bs)
}// EOM
macro buildOverlapPeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, labPeriodic, bs) {
    real[int] emptyArray(0);
    buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, labPeriodic, emptyArray, bs)
}// EOM
macro buildEdgeWithPartitioning(Th, part, s, intersection, D, P, comm, PkPart, defPart, initPart, bs) {
    int[int] emptyArray(0);
    meshN ThBorder;
    int fakeInterface = -111111;
    int overlap = 1;
    bool excluded = false;
    buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, intersection, D, P, comm, excluded, PkPart, defPart, initPart, emptyArray, part, bs)
}// EOM
macro buildWithPartitioning(Th, part, s, intersection, D, P, comm, bs) {
    int[int] emptyArray(0);
    meshN ThBorder;
    int fakeInterface = -111111;
    int overlap = 1;
    bool excluded = false;
    buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, emptyArray, part, bs)
}// EOM
macro build(Th, s, intersection, D, P, comm, bs) {
    int[int] emptyArray(0);
    real[int] emptyRealArray(0);
    meshN ThBorder;
    int fakeInterface = -111111;
    int overlap = 1;
    bool excluded = false;
    buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, emptyArray, emptyRealArray, bs)
}// EOM
macro buildPeriodic(Th, s, intersection, D, P, comm, labPeriodic, bs) {
    int[int] emptyArray(0);
    real[int] emptyRealArray(0);
    meshN ThBorder;
    int fakeInterface = -111111;
    int overlap = 1;
    bool excluded = false;
    buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, labPeriodic, emptyRealArray, bs)
}// EOM
macro buildMinimalist(Th, intersection, D, P, bs) {
    int[int] emptyArray(0);
    real[int] emptyRealArray(0);
    meshN ThBorder;
    int fakeInterface = -111111;
    int overlap = 1;
    bool excluded = false;
    buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, 1, overlap, intersection, D, P, mpiCommWorld, excluded, P, def, init, emptyArray, emptyRealArray, bs)
}// EOM
ENDIFMACRO
IFMACRO(!vectorialfe)
macro buildOverlapEdgeRecursive(Th, ThBorder, fakeInterface, s, overlap, level, prolongation, intersection, D, P, comm, excluded, PkPart, defPart, initPart) {
    int[int] emptyArray(0);
    real[int] emptyRealArray(0);
    buildOverlapEdgePeriodicRecursive(Th, ThBorder, fakeInterface, s, overlap, level, prolongation, intersection, D, P, comm, excluded, PkPart, defPart, initPart, emptyArray, emptyRealArray, 1)
}// EOM
macro buildOverlapEdge(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart) {
    int[int] emptyArray(0);
    real[int] emptyRealArray(0);
    buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart, emptyArray, emptyRealArray, 1)
}// EOM
macro buildOverlapEdgeWithPartitioning(Th, ThBorder, part, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart) {
    int[int] emptyArray(0);
    buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart, emptyArray, part, 1)
}// EOM
macro buildOverlapWithPartitioning(Th, ThBorder, part, fakeInterface, s, overlap, intersection, D, P, comm, excluded) {
    int[int] emptyArray(0);
    buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, emptyArray, part, 1)
}// EOM
macro buildOverlap(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded) {
    int[int] emptyArray(0);
    real[int] emptyRealArray(0);
    buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, emptyArray, emptyRealArray, 1)
}// EOM
macro buildOverlapPeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, labPeriodic) {
    real[int] emptyArray(0);
    buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, labPeriodic, emptyArray, 1)
}// EOM
macro buildEdgeWithPartitioning(Th, part, s, intersection, D, P, comm, PkPart, defPart, initPart) {
    int[int] emptyArray(0);
    meshN ThBorder;
    int fakeInterface = -111111;
    int overlap = 1;
    bool excluded = false;
    buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, PkPart, defPart, initPart, emptyArray, part, 1)
}// EOM
macro buildWithPartitioning(Th, part, s, intersection, D, P, comm) {
    int[int] emptyArray(0);
    meshN ThBorder;
    int fakeInterface = -111111;
    int overlap = 1;
    bool excluded = false;
    buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, emptyArray, part, 1)
}// EOM
macro build(Th, s, intersection, D, P, comm) {
    int[int] emptyArray(0);
    real[int] emptyRealArray(0);
    meshN ThBorder;
    int fakeInterface = -111111;
    int overlap = 1;
    bool excluded = false;
    buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, emptyArray, emptyRealArray, 1)
}// EOM
macro buildPeriodic(Th, s, intersection, D, P, comm, labPeriodic) {
    int[int] emptyArray(0);
    real[int] emptyRealArray(0);
    meshN ThBorder;
    int fakeInterface = -111111;
    int overlap = 1;
    bool excluded = false;
    buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, s, overlap, intersection, D, P, comm, excluded, P, def, init, labPeriodic, emptyRealArray, 1)
}// EOM
macro buildMinimalist(Th, intersection, D, P) {
    int[int] emptyArray(0);
    real[int] emptyRealArray(0);
    meshN ThBorder;
    int fakeInterface = -111111;
    int overlap = 1;
    bool excluded = false;
    buildOverlapEdgePeriodic(Th, ThBorder, fakeInterface, 1, overlap, intersection, D, P, mpiCommWorld, excluded, P, def, init, emptyArray, emptyRealArray, 1)
}// EOM
ENDIFMACRO
