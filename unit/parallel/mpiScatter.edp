//NBPROC 4
assert(mpisize == 4);
include "test.idp"

cout << "mpiScatter" << endl;

int[int] procs=[0,3];
mpiGroup gpr(procs);
cout << " before  ...  " << mpirank << endl;
mpiComm comm(gpr);
cout << " after ...  " << mpirank << "  in : " << bool(comm)
<< " rank " << mpiRank(comm) << " / " << mpiSize(comm) <<endl;
mpiComm  n0comm(mpiCommWorld,mpirank%3,0);// MPI_Comm_split
mpiComm  n1comm(mpiCommWorld,mpirank%3,1);// MPI_Comm_split
mpiComm  n2comm(mpiCommWorld,mpirank%3,2);// MPI_Comm_split
// if( ! n1comm)  // not in n1comm
//   {
//      // MPI_Intercomm_create constructor
//    mpiComm  nicomm(processor(n1comm,1),processor(n2comm,2),1000);
//    mpiComm  n12comm(nicomm,true);  // MPI_Intercomm_merge cosntructor
//   }
//
//   int[int] a(mpisize), b(mpisize);
//   a[mpirank] = mpirank;
//
//   if (mpirank == 0) {
//     cout << "int[int]" << endl;
//     mpiScatter(a, b, processor(1, n0comm));
//   }
//   else  if (mpirank == 1) {
//     cout << b[mpirank] << endl;
//     test(b[mpirank] == mpirank);
//   }  //TODO bug
  // if (mpirank == 0)
  //   cout << "int[int]" << endl;
  // int[int] a(mpisize), b(mpisize);
  // a[mpirank] = mpirank;
  // if (mpirank == 0) {
  //   mpiScatter(a, b, processor(0, comm));
  // } else if (mpirank == 1) {
  //   test(b[mpirank] == mpirank);
  // }
