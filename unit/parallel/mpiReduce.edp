//NBPROC 4
assert(mpisize == 4);

include "test.idp"

real t;
if (!mpirank) cout << "mpiReduce" << endl;
if (!mpirank) cout << IND << "mpiMAX" << endl;
int rank = mpirank;
int globalRank;

if (!mpirank) cout << IND << IND << "int" << endl;
for (int i = 0; i < mpisize; i++) {
  t = mpiWtime();
  mpiReduce(rank, globalRank, processor(i), mpiMAX);
  t = mpiWtime() - t;
  cout << IND << t << endl;
  if (mpirank == i) cout << globalRank << endl;
  if (mpirank == i)
    test(globalRank == 3);
}

if (!mpirank) cout << IND << IND << "real" << endl;

real rankr = 1./(1. + mpirank);
real globalRankr;

for (int i = 0; i < mpisize; i++) {
  t = mpiWtime();
  mpiReduce(rankr, globalRankr, processor(i), mpiMAX);
  t = mpiWtime() - t;
  cout << IND << t << endl;
  if (mpirank == i) cout << globalRankr << endl;
  if (mpirank == i)
    test(globalRankr == 1.);
}

//mpiMIN, mpiSUM, mpiPROD, mpiLAND, mpiLOR, mpiLXOR, mpiBAND, mpiBXOR
if (!mpirank) cout << IND << "mpiMIN" << endl;
mpiReduce(rank, globalRank, processor(0), mpiMIN);
if (mpirank) cout << IND << IND << globalRank << endl;
if (!mpirank) cout << IND << IND << globalRank << endl;

if (!mpirank) cout << IND << "mpiSUM" << endl;
mpiReduce(rank, globalRank, processor(0), mpiSUM);
if (!mpirank) cout << IND << IND <<  globalRank << endl;

if (!mpirank) cout << IND << "mpiPROD" << endl;
mpiReduce(rank, globalRank, processor(0), mpiPROD);
if (!mpirank) cout << IND << IND << globalRank << endl;

if (!mpirank) cout << IND << "mpiLAND" << endl;
mpiReduce(rank, globalRank, processor(0), mpiLAND);
if (!mpirank) cout << IND << IND << globalRank << endl;

if (!mpirank) cout << IND << "mpiLOR" << endl;
mpiReduce(rank, globalRank, processor(0), mpiLOR);
if (!mpirank) cout << IND << IND << globalRank << endl;

if (!mpirank) cout << IND << "mpiBAND" << endl;
mpiReduce(rank, globalRank, processor(0), mpiBAND);
if (!mpirank) cout << IND << IND << globalRank << endl;

mpiReduce(rank, globalRank, processor(0), mpiBXOR);

int ranki = mpirank % 2;
int globalRanki;

if (!mpirank) cout << IND << "mpiMIN" << endl;
mpiReduce(rankr, globalRankr, processor(0), mpiMIN);
if (mpirank) cout << IND << IND << globalRankr << endl;
if (!mpirank) cout << IND << IND << globalRankr << endl;

if (!mpirank) cout << IND << "mpiSUM" << endl;
mpiReduce(rankr, globalRankr, processor(0), mpiSUM);
if (!mpirank) cout << IND << IND << globalRankr << endl;

if (!mpirank) cout << IND << "mpiPROD" << endl;
mpiReduce(rankr, globalRankr, processor(0), mpiPROD);
if (!mpirank) cout << IND << "mpiSUM" << endl;
if (!mpirank) cout << IND << IND << globalRankr << endl;

if (!mpirank) cout << IND << "mpiLAND" << endl;
mpiReduce(ranki, globalRanki, processor(0), mpiLAND);
if (!mpirank) cout << IND << IND << globalRanki << endl;

if (!mpirank) cout << IND << "mpiLOR" << endl;
mpiReduce(ranki, globalRanki, processor(0), mpiLOR);
if (!mpirank) cout << IND << IND << globalRanki << endl;

if (!mpirank) cout << IND << "mpiBAND" << endl;
mpiReduce(ranki, globalRanki, processor(0), mpiBAND);

if (!mpirank) cout << IND << "mpiBXOR" << endl;
if (!mpirank) cout << IND << IND << globalRanki << endl;
mpiReduce(ranki, globalRanki, processor(0), mpiBXOR);
