include "test.idp"

cout << functionDEFINITION << "display" << endl;
real t;
real r = 42;
matrix A = [[1, 2, 3], [4, 5, 6]];
func Pk = P2;

int nn = 10;	//Mesh quality
func f = -2.*x*(y-1.)*(y-2.*x+x*y+2.)*exp(x-y);
int[int] Wall = [1, 2, 3, 4];
func uD = 0;
func ue = exp(x-y)*x*(1.-x)*y*(1.-y);

// Macro
macro grad(A) [dx(A), dy(A)] //

// Mesh
border b1(t=0, 1){x=t; y=0; label=1;}
border b2(t=0, 1){x=1; y=t; label=2;}
border b3(t=0, 1){x=1-t; y=1; label=3;}
border b4(t=0, 1){x=0; y=1-t; label=4;}
mesh Th = buildmesh(b1(nn) + b2(nn) + b3(nn) + b4(nn));

fespace Uh(Th, Pk);
Uh u, uh;
Uh uerror;

cout << typeDEFINITION << "varf" << endl;
	t = clock();
	varf vPoisson (u, uh)
		= int2d(Th)(
			  grad(u)' * grad(uh)
		)
		+ int2d(Th)(
			  f * uh
		)
		+ on(Wall, u=uD)
		;
	t = clock() - t;
	cout << timeELAPSED << t << endl;
	matrix<real> Poisson = vPoisson(Uh, Uh, solver=sparsesolver);

t = clock();
display(Poisson);
t = clock() - t;
cout << timeELAPSED << t << endl;
