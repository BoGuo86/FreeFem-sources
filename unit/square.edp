include "test.idp"

cout << "square" << endl;
real t;

cout << IND << "int" << endl;

int i = 4;
real ineg = -4;

t = clock();
real resi1 = square(i);
t = clock() - t;
cout << IND << IND << t << endl;
test(resi1 == 16);

t = clock();
real resineg = square(ineg);
t = clock() - t;
cout << IND << IND << t << endl;
test(resineg == 16);

cout << IND << "real" << endl;

real r = 4.0;
real rneg = -4.0;

t = clock();
real resr1 = square(r);
t = clock() - t;
cout << IND << IND << t << endl;
test(resr1 == 16.0);

t = clock();
real resrneg = square(rneg);
t = clock() - t;
cout << IND << IND << t << endl;
test(resrneg == 16.0);

cout << IND << "complex" << endl;

complex c = 4 + 2i;
complex cneg = -4 + 2i;

t = clock();
complex rescint = square(c);
t = clock() - t;
cout << IND << IND << t << endl;
test(rescint == 12.0 + 16i);

t = clock();
complex rescneg = square(cneg);
t = clock() - t;
cout << IND << IND << t << endl;
test(rescneg == 12.0 - 16i);

// cout << IND << "complex[int]" << endl;
//
// complex[int] carray = [4 + 2i, 1 + 1i];
// complex[int] cnegarray = [-4 + 2i, 1 + 1i];
// int index = 1;
//
// t = clock();
// cout << square(carray) << endl;
// t = clock() - t;
// cout << IND << IND << t << endl;
// test(carrayint[0] == 12.0 + 16i);
// test(carrayint[1] == -1 + 1i);
//
// t = clock();
// complex[int] carrayneg = square(cnegarray);
// t = clock() - t;
// cout << IND << IND << t << endl;
// test(carrayneg[0] == 12.0 - 16i);
// test(carrayneg[1] == 1. + 1i);
