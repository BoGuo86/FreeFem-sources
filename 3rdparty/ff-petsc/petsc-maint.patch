diff --git a/config/BuildSystem/config/packages/PTScotch.py b/config/BuildSystem/config/packages/PTScotch.py
index 8c6b872e01..e1e71f371d 100644
--- a/config/BuildSystem/config/packages/PTScotch.py
+++ b/config/BuildSystem/config/packages/PTScotch.py
@@ -23,7 +23,8 @@ class Configure(config.package.Package):
     self.mathlib        = framework.require('config.packages.mathlib',self)
     self.pthread        = framework.require('config.packages.pthread',self)
     self.zlib           = framework.require('config.packages.zlib',self)
-    self.deps           = [self.mpi, self.mathlib]
+    self.regex          = framework.require('config.packages.regex',self)
+    self.deps           = [self.mpi,self.mathlib,self.regex]
     self.odeps          = [self.pthread,self.zlib]
     return
 
@@ -55,12 +56,17 @@ class Configure(config.package.Package):
 
     # Building cflags/ldflags
     self.cflags = self.removeWarningFlags(self.setCompilers.getCompilerFlags())+' '+self.headers.toString(self.mpi.include)
+    functions = self.framework.require('config.functions', self)
+    if not functions.haveFunction('FORK') and not functions.haveFunction('_PIPE'):
+      raise RuntimeError('Error building PTScotch: no pipe function')
     ldflags = self.libraries.toString(self.dlib)
     if self.zlib.found:
       self.cflags = self.cflags + ' -DCOMMON_FILE_COMPRESS_GZ'
     # OSX does not have pthread_barrier_destroy
     if self.pthread.found and self.pthread.pthread_barrier:
       self.cflags = self.cflags + ' -DCOMMON_PTHREAD'
+    if functions.haveFunction('_PIPE'):
+      self.cflags = self.cflags + ' -D\'pipe(pfds)=_pipe(pfds,1024,0x8000)\''
     if self.libraries.add('-lrt','timer_create'): ldflags += ' -lrt'
     self.cflags = self.cflags + ' -DCOMMON_RANDOM_FIXED_SEED'
     # do not use -DSCOTCH_PTHREAD because requires MPI built for threads.
diff --git a/config/BuildSystem/config/packages/cgns.py b/config/BuildSystem/config/packages/cgns.py
old mode 100755
new mode 100644
diff --git a/config/BuildSystem/config/packages/metis.py b/config/BuildSystem/config/packages/metis.py
index 63854604a0..c60ca3f138 100644
--- a/config/BuildSystem/config/packages/metis.py
+++ b/config/BuildSystem/config/packages/metis.py
@@ -4,7 +4,7 @@ class Configure(config.package.CMakePackage):
   def __init__(self, framework):
     config.package.CMakePackage.__init__(self, framework)
     self.versionname       = 'METIS_VER_MAJOR.METIS_VER_MINOR.METIS_VER_SUBMINOR'
-    self.gitcommit         = 'v5.1.0-p7'
+    self.gitcommit         = 'v5.1.0-p8'
     self.download          = ['git://https://bitbucket.org/petsc/pkg-metis.git','https://bitbucket.org/petsc/pkg-metis/get/'+self.gitcommit+'.tar.gz']
     self.downloaddirnames  = ['petsc-pkg-metis']
     self.functions         = ['METIS_PartGraphKway']
@@ -23,7 +23,7 @@ class Configure(config.package.CMakePackage):
   def setupDependencies(self, framework):
     config.package.CMakePackage.setupDependencies(self, framework)
     self.compilerFlags = framework.require('config.compilerFlags', self)
-    self.mathlib       = framework.require('config.packages.mathlib',self)
+    self.mathlib       = framework.require('config.packages.mathlib', self)
     self.deps          = [self.mathlib]
     return
 
diff --git a/config/BuildSystem/config/packages/parmetis.py b/config/BuildSystem/config/packages/parmetis.py
index 98dc9cc0af..0e784f2d45 100644
--- a/config/BuildSystem/config/packages/parmetis.py
+++ b/config/BuildSystem/config/packages/parmetis.py
@@ -5,7 +5,7 @@ class Configure(config.package.CMakePackage):
     config.package.CMakePackage.__init__(self, framework)
     self.version          = '4.0.3'
     self.versionname      = 'PARMETIS_MAJOR_VERSION.PARMETIS_MINOR_VERSION.PARMETIS_SUBMINOR_VERSION'
-    self.gitcommit         = 'v'+self.version+'-p5'
+    self.gitcommit         = 'v'+self.version+'-p6'
     self.download          = ['git://https://bitbucket.org/petsc/pkg-parmetis.git','https://bitbucket.org/petsc/pkg-parmetis/get/'+self.gitcommit+'.tar.gz']
     self.functions         = ['ParMETIS_V3_PartKway']
     self.includes          = ['parmetis.h']
diff --git a/config/BuildSystem/config/packages/regex.py b/config/BuildSystem/config/packages/regex.py
new file mode 100644
index 0000000000..1c13617c1a
--- /dev/null
+++ b/config/BuildSystem/config/packages/regex.py
@@ -0,0 +1,11 @@
+import config.package
+import os
+
+class Configure(config.package.Package):
+  def __init__(self, framework):
+    config.package.Package.__init__(self, framework)
+    self.functions        = ['regexec', 'regcomp', 'regfree']
+    self.includes         = ['regex.h']
+    self.liblist          = [['libregex.a']]
+    self.lookforbydefault = 1
+    return
diff --git a/config/PETSc/Configure.py b/config/PETSc/Configure.py
index 363c5d6550..933082e977 100644
--- a/config/PETSc/Configure.py
+++ b/config/PETSc/Configure.py
@@ -122,19 +122,19 @@ class Configure(config.base.Configure):
         self.registerPythonFile(fname,'')
 
     # test for a variety of basic headers and functions
-    headersC = map(lambda name: name+'.h', ['setjmp','dos', 'fcntl', 'float', 'io',  'malloc', 'pwd',  'strings',
-                                            'unistd', 'sys/sysinfo', 'machine/endian', 'sys/param', 'sys/procfs', 'sys/resource',
-                                            'sys/systeminfo', 'sys/times', 'sys/utsname',
+    headersC = map(lambda name: name+'.h',['setjmp','dos','fcntl','float','io','malloc','pwd','strings',
+                                            'unistd','sys/sysinfo','machine/endian','sys/param','sys/procfs','sys/resource',
+                                            'sys/systeminfo','sys/times','sys/utsname',
                                             'sys/socket','sys/wait','netinet/in','netdb','Direct','time','Ws2tcpip','sys/types',
-                                            'WindowsX', 'float','ieeefp','stdint','pthread','inttypes','immintrin','zmmintrin'])
-    functions = ['access', '_access', 'clock', 'drand48', 'getcwd', '_getcwd', 'getdomainname', 'gethostname',
-                 'getwd', 'memalign', 'popen', 'PXFGETARG', 'rand', 'getpagesize',
-                 'readlink', 'realpath',  'usleep', 'sleep', '_sleep',
+                                            'WindowsX','float','ieeefp','stdint','pthread','inttypes','immintrin','zmmintrin'])
+    functions = ['access','_access','clock','drand48','getcwd','_getcwd','getdomainname','gethostname',
+                 'getwd','memalign','popen','PXFGETARG','rand','getpagesize',
+                 'readlink','realpath','usleep','sleep','_sleep',
                  'uname','snprintf','_snprintf','lseek','_lseek','time','fork','stricmp',
-                 'strcasecmp', 'bzero', 'dlopen', 'dlsym', 'dlclose', 'dlerror',
-                 '_set_output_format','_mkdir','socket','gethostbyname']
-    libraries = [(['fpe'], 'handle_sigfpes')]
-    librariessock = [(['socket', 'nsl'], 'socket')]
+                 'strcasecmp','bzero','dlopen','dlsym','dlclose','dlerror',
+                 '_set_output_format','_mkdir','socket','gethostbyname','_pipe']
+    libraries = [(['fpe'],'handle_sigfpes')]
+    librariessock = [(['socket','nsl'],'socket')]
     self.headers.headers.extend(headersC)
     self.functions.functions.extend(functions)
     self.libraries.libraries.extend(libraries)
diff --git a/src/sys/error/adebug.c b/src/sys/error/adebug.c
index 4f06531f40..85fcea8860 100644
--- a/src/sys/error/adebug.c
+++ b/src/sys/error/adebug.c
@@ -176,7 +176,7 @@ PetscErrorCode  PetscSetDebuggerFromString(const char *string)
 @*/
 PetscErrorCode  PetscAttachDebugger(void)
 {
-#if !defined(PETSC_CANNOT_START_DEBUGGER)
+#if !defined(PETSC_CANNOT_START_DEBUGGER) && defined(PETSC_HAVE_FORK)
   int            child    =0;
   PetscReal      sleeptime=0;
   PetscErrorCode ierr;
